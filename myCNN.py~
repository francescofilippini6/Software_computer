from __future__ import print_function
from keras.datasets import mnist
import numpy as np

import keras

from keras.models import Sequential
from keras.layers import Dense, Dropout, Flatten
from keras.layers import Conv2D, MaxPooling2D
from keras.callbacks import ModelCheckpoint
from keras.models import model_from_json
from keras import backend as K


with h5py.File('numuCC_hist.h5','r') as hdf:
    base_items = list(hdf.items())
    print('Items in the base directory', base_items)
    x_train = np.array(hdf.get('x'))
    print('shape',x_train.shape)
    nevt=x_train.shape[0]
    print(nevt)
    ybins=x_train.shape[1]
    xbins=x_train.shape[2]
    y_train=np.ones(nevt)
    hdf.create_dataset('y', data=yl, dtype=yl.dtype)    

x_test = np.array(hdf.get('x')) 

print('Training data shape: ', x_train.shape)
print('Testing data shape : ', x_test.shape)

# The known number of output classes.
num_classes = 2

# Input image dimensions
img_rows, img_cols = 18, 299

# Channels go last for TensorFlow backend
x_train_reshaped = x_train.reshape(x_train.shape[0], img_rows, img_cols, 1)
x_test_reshaped = x_test.reshape(x_test.shape[0], img_rows, img_cols, 1)
input_shape = (img_rows, img_cols, 1)
# Convert class vectors to binary class matrices. This uses 1 hot encoding.
y_train_binary = keras.utils.to_categorical(y_train, num_classes)
y_test_binary = keras.utils.to_categorical(y_test, num_classes)
model = Sequential()
model.add(Conv2D(32, kernel_size=(3, 3),
                 activation='relu',
                 input_shape=input_shape))
model.add(Conv2D(64, (3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))
model.add(Flatten())
model.add(Dense(128, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(num_classes, activation='softmax'))

model.compile(loss=keras.losses.categorical_crossentropy,
              optimizer=keras.optimizers.Adadelta(),
              metrics=['accuracy'])
epochs = 4
batch_size = 128
# Fit the model weights.
model.fit(x_train_reshaped, y_train_binary,
          batch_size=batch_size,
          epochs=epochs,
          verbose=1,
          validation_data=(x_test_reshaped, y_test_binary))
